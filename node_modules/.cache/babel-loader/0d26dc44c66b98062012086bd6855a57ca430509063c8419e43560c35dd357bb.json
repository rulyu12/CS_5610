{"ast":null,"code":"var _jsxFileName = \"/Users/ruoxilyu/Downloads/CS5610/Wordle/src/components/grid/CurrentRow.js\";\nimport { fn, unicodeSplit } from '../../lib/words';\nimport Cell from './Cell.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CurrentRow = _ref => {\n  let {\n    guess,\n    className\n  } = _ref;\n  const {\n    solution\n  } = fn();\n  const splitGuess = unicodeSplit(guess);\n  const emptyCells = Array.from(Array(solution.length - splitGuess.length));\n  const classes = `flex justify-center mb-1 ${className}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes,\n    children: [splitGuess.map((letter, i) => /*#__PURE__*/_jsxDEV(Cell, {\n      value: letter\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)), emptyCells.map((_, i) => /*#__PURE__*/_jsxDEV(Cell, {}, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_c = CurrentRow;\nvar _c;\n$RefreshReg$(_c, \"CurrentRow\");","map":{"version":3,"names":["fn","unicodeSplit","Cell","jsxDEV","_jsxDEV","CurrentRow","_ref","guess","className","solution","splitGuess","emptyCells","Array","from","length","classes","children","map","letter","i","value","fileName","_jsxFileName","lineNumber","columnNumber","_","_c","$RefreshReg$"],"sources":["/Users/ruoxilyu/Downloads/CS5610/Wordle/src/components/grid/CurrentRow.js"],"sourcesContent":["import { fn, unicodeSplit } from '../../lib/words'\nimport Cell from './Cell.js'\n\nexport const CurrentRow = ({ guess, className }) => {\nconst {solution} = fn()\n\n  const splitGuess = unicodeSplit(guess)\n  const emptyCells = Array.from(Array(solution.length - splitGuess.length))\n  const classes = `flex justify-center mb-1 ${className}`\n\n  return (\n    <div className={classes}>\n      {splitGuess.map((letter, i) => (\n        <Cell key={i} value={letter} />\n      ))}\n      {emptyCells.map((_, i) => (\n        <Cell key={i} />\n      ))}\n    </div>\n  )\n}\n"],"mappings":";AAAA,SAASA,EAAE,EAAEC,YAAY,QAAQ,iBAAiB;AAClD,OAAOC,IAAI,MAAM,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,OAAO,MAAMC,UAAU,GAAGC,IAAA,IAA0B;EAAA,IAAzB;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAAF,IAAA;EAC/C,MAAM;IAACG;EAAQ,CAAC,GAAGT,EAAE,EAAE;EAErB,MAAMU,UAAU,GAAGT,YAAY,CAACM,KAAK,CAAC;EACtC,MAAMI,UAAU,GAAGC,KAAK,CAACC,IAAI,CAACD,KAAK,CAACH,QAAQ,CAACK,MAAM,GAAGJ,UAAU,CAACI,MAAM,CAAC,CAAC;EACzE,MAAMC,OAAO,GAAI,4BAA2BP,SAAU,EAAC;EAEvD,oBACEJ,OAAA;IAAKI,SAAS,EAAEO,OAAQ;IAAAC,QAAA,GACrBN,UAAU,CAACO,GAAG,CAAC,CAACC,MAAM,EAAEC,CAAC,kBACxBf,OAAA,CAACF,IAAI;MAASkB,KAAK,EAAEF;IAAO,GAAjBC,CAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACb,CAAC,EACDb,UAAU,CAACM,GAAG,CAAC,CAACQ,CAAC,EAAEN,CAAC,kBACnBf,OAAA,CAACF,IAAI,MAAMiB,CAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV,CAAC;AAAAE,EAAA,GAjBYrB,UAAU;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}