{"ast":null,"code":"var _jsxFileName = \"/Users/ruoxilyu/Downloads/CS5610/Wordle/src/App.js\",\n  _s = $RefreshSig$();\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\nimport { useEffect, useState } from 'react';\nimport { AlertContainer } from './components/alerts/AlertContainer';\nimport { Grid } from './components/grid/Grid';\nimport Keyboard from './components/keyboard/Keyboard';\nimport { InfoModal } from './components/modals/InfoModal';\nimport SettingsModal from './components/modals/SettingsModal.js';\nimport Header from './components/navbar/Navbar.js';\nimport { MAX_CHALLENGES, REVEAL_TIME_MS } from './constants/settings';\nimport { CORRECT_WORD_MESSAGE, HARD_MODE_ALERT_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, WIN_MESSAGES, WORD_NOT_FOUND_MESSAGE } from './constants/strings';\nimport { useAlert } from './context/AlertContext';\nimport { findFirstUnusedReveal, isWinningWord, isWordInWordList, fn, unicodeLength } from './lib/words';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    solution\n  } = fn();\n  const {\n    showError: showErrorAlert,\n    showSuccess: showSuccessAlert\n  } = useAlert();\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(true);\n  const [currentRowClass, setCurrentRowClass] = useState('');\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isRevealing, setIsRevealing] = useState(false);\n  const [guesses, setGuesses] = useState([]);\n  const [isHardMode, setIsHardMode] = useState(localStorage.getItem('gameMode') ? localStorage.getItem('gameMode') === 'hard' : false);\n\n  // gets executed when the user selects the hard mode option\n  const handleHardMode = isHard => {\n    console.log('isHard: ', isHard);\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard);\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal');\n      // Users cannot switch to hard mode mid-game.\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE);\n    }\n  };\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('');\n  };\n\n  //show a success alert message and reload the page if the game is won\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage = WIN_MESSAGES;\n      const delayMs = REVEAL_TIME_MS * solution.length;\n      showSuccessAlert(winMessage, {\n        delayMs\n      });\n      setTimeout(() => {\n        window.location.reload();\n      }, delayMs + 300000);\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert, solution]);\n\n  // called whenever the user enters a character while playing the game\n  const onChar = value => {\n    if (unicodeLength(`${currentGuess}${value}`) <= solution.length && guesses.length < MAX_CHALLENGES() && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  // removing the last character\n  const onDelete = () => {\n    setCurrentGuess(new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join(''));\n  };\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    }\n    if (!isWordInWordList(currentGuess, isHardMode)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    }\n\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses);\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle');\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass\n        });\n      }\n    }\n    setIsRevealing(true);\n    // turn this back off after all\n    // chars have been revealed\n    setTimeout(() => {\n      setIsRevealing(false);\n    }, REVEAL_TIME_MS * solution.length);\n    const winningWord = isWinningWord(currentGuess);\n    console.log('winningWord: ', winningWord);\n    console.log('solution: ', solution);\n    if (unicodeLength(currentGuess) === solution.length && guesses.length < MAX_CHALLENGES() && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n      if (winningWord) {\n        return setIsGameWon(true);\n      }\n      // else if the guess time reach the max limit\n      if (guesses.length === MAX_CHALLENGES() - 1) {\n        setIsGameLost(true);\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex h-full flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        setIsInfoModalOpen: setIsInfoModalOpen,\n        setIsSettingsModalOpen: setIsSettingsModalOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex grow flex-col justify-center pb-6 short:pb-2\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            solution: solution,\n            guesses: guesses,\n            currentGuess: currentGuess,\n            isRevealing: isRevealing,\n            currentRowClassName: currentRowClass\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n          onChar: onChar,\n          onDelete: onDelete,\n          onEnter: onEnter,\n          solution: solution,\n          guesses: guesses,\n          isRevealing: isRevealing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n          isOpen: isInfoModalOpen,\n          handleClose: () => setIsInfoModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n          isOpen: isSettingsModalOpen,\n          handleClose: () => setIsSettingsModalOpen(false),\n          isHardMode: isHardMode,\n          handleHardMode: handleHardMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AlertContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RJtuMoCpg9ECXmCWTOOdQrFI8/Y=\", false, function () {\n  return [useAlert];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["default","GraphemeSplitter","useEffect","useState","AlertContainer","Grid","Keyboard","InfoModal","SettingsModal","Header","MAX_CHALLENGES","REVEAL_TIME_MS","CORRECT_WORD_MESSAGE","HARD_MODE_ALERT_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","WIN_MESSAGES","WORD_NOT_FOUND_MESSAGE","useAlert","findFirstUnusedReveal","isWinningWord","isWordInWordList","fn","unicodeLength","jsxDEV","_jsxDEV","App","_s","solution","showError","showErrorAlert","showSuccess","showSuccessAlert","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","currentRowClass","setCurrentRowClass","isGameLost","setIsGameLost","isRevealing","setIsRevealing","guesses","setGuesses","isHardMode","setIsHardMode","localStorage","getItem","handleHardMode","isHard","console","log","length","setItem","clearCurrentRowClass","winMessage","delayMs","setTimeout","window","location","reload","onChar","value","onDelete","splitGraphemes","slice","join","onEnter","onClose","firstMissingReveal","winningWord","persist","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentRowClassName","isOpen","handleClose","_c","$RefreshReg$"],"sources":["/Users/ruoxilyu/Downloads/CS5610/Wordle/src/App.js"],"sourcesContent":["import { default as GraphemeSplitter } from 'grapheme-splitter'\nimport { useEffect, useState } from 'react'\nimport { AlertContainer } from './components/alerts/AlertContainer'\nimport { Grid } from './components/grid/Grid'\nimport Keyboard from './components/keyboard/Keyboard'\nimport { InfoModal } from './components/modals/InfoModal'\nimport SettingsModal from './components/modals/SettingsModal.js'\nimport Header from './components/navbar/Navbar.js'\nimport {\n  MAX_CHALLENGES,\n  REVEAL_TIME_MS,\n} from './constants/settings'\nimport {\n  CORRECT_WORD_MESSAGE,\n  HARD_MODE_ALERT_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  WIN_MESSAGES,\n  WORD_NOT_FOUND_MESSAGE,\n} from './constants/strings'\nimport { useAlert } from './context/AlertContext'\nimport {\n  findFirstUnusedReveal,\n  isWinningWord,\n  isWordInWordList,\n  fn,\n  unicodeLength\n} from './lib/words'\nimport './App.css'\n\n\nfunction App() {\n  const {solution} = fn();\n  const { showError: showErrorAlert, showSuccess: showSuccessAlert } =\n    useAlert()\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(true)\n  const [currentRowClass, setCurrentRowClass] = useState('')\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isRevealing, setIsRevealing] = useState(false)\n  const [guesses, setGuesses] = useState([])\n  const [isHardMode, setIsHardMode] = useState(\n    localStorage.getItem('gameMode')\n      ? localStorage.getItem('gameMode') === 'hard'\n      : false\n  )\n  \n\n  // gets executed when the user selects the hard mode option\n  const handleHardMode = (isHard) => {\n    console.log('isHard: ', isHard);\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard)\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n      // Users cannot switch to hard mode mid-game.\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE)\n    }\n  }\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('')\n  }\n\n  //show a success alert message and reload the page if the game is won\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage = WIN_MESSAGES\n      const delayMs = REVEAL_TIME_MS * solution.length\n      showSuccessAlert(winMessage, {\n        delayMs\n      })\n\n      setTimeout(()=>{\n        window.location.reload();\n      },delayMs+300000)\n   \n    }\n  }, [isGameWon, isGameLost, showSuccessAlert,solution])\n\n  // called whenever the user enters a character while playing the game\n  const onChar = (value) => {\n    if (\n      unicodeLength(`${currentGuess}${value}`) <= solution.length &&\n      guesses.length < MAX_CHALLENGES() &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  // removing the last character\n  const onDelete = () => {\n    setCurrentGuess(\n      new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join('')\n    )\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    if (!isWordInWordList(currentGuess,isHardMode)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle')\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass,\n        })\n      }\n    }\n\n    setIsRevealing(true)\n    // turn this back off after all\n    // chars have been revealed\n    setTimeout(() => {\n      setIsRevealing(false)\n    }, REVEAL_TIME_MS * solution.length)\n\n    const winningWord = isWinningWord(currentGuess)\n    console.log('winningWord: ', winningWord);\n    console.log('solution: ', solution);\n    if (\n      unicodeLength(currentGuess) === solution.length &&\n      \n      guesses.length < MAX_CHALLENGES() &&\n      !isGameWon\n    ) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n \n        return setIsGameWon(true)\n      }\n      // else if the guess time reach the max limit\n      if (guesses.length === MAX_CHALLENGES() - 1) {\n\n        setIsGameLost(true)\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1,\n        })\n      }\n    }\n  }\n\n  return (\n    <div className='container-wrapper'>\n      <div className=\"flex h-full flex-col\">\n        <Header\n          setIsInfoModalOpen={setIsInfoModalOpen}\n          setIsSettingsModalOpen={setIsSettingsModalOpen}\n        />\n        <div className=\"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\">\n          <div className=\"flex grow flex-col justify-center pb-6 short:pb-2\">\n            <Grid\n              solution={solution}\n              guesses={guesses}\n              currentGuess={currentGuess}\n              isRevealing={isRevealing}\n              currentRowClassName={currentRowClass}\n            />\n          </div>\n          <Keyboard\n            onChar={onChar}\n            onDelete={onDelete}\n            onEnter={onEnter}\n            solution={solution}\n            guesses={guesses}\n            isRevealing={isRevealing}\n          />\n          <InfoModal\n            isOpen={isInfoModalOpen}\n            handleClose={() => setIsInfoModalOpen(false)}\n          />\n          <SettingsModal\n            isOpen={isSettingsModalOpen}\n            handleClose={() => setIsSettingsModalOpen(false)}\n            isHardMode={isHardMode}\n            handleHardMode={handleHardMode}\n          />\n          <AlertContainer />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}