{"ast":null,"code":"import { unicodeSplit } from './words';\nexport const getStatuses = (solution, guesses) => {\n  const charObj = {};\n  const splitSolution = unicodeSplit(solution);\n  guesses.forEach(word => {\n    unicodeSplit(word).forEach((letter, i) => {\n      if (!splitSolution.includes(letter)) {\n        // make status absent\n        return charObj[letter] = 'absent';\n      }\n      if (letter === splitSolution[i]) {\n        //make status correct\n        return charObj[letter] = 'correct';\n      }\n      if (charObj[letter] !== 'correct') {\n        //make status present\n        return charObj[letter] = 'present';\n      }\n    });\n  });\n  return charObj;\n};\nexport const getGuessStatuses = (solution, guess) => {\n  const splitSolution = unicodeSplit(solution);\n  const splitGuess = unicodeSplit(guess);\n  const solutionCharsTaken = splitSolution.map(_ => false);\n  const statuses = Array.from(Array(guess.length));\n\n  // handle all correct cases first\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = 'correct';\n      solutionCharsTaken[i] = true;\n      return;\n    }\n  });\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return;\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = 'absent';\n      return;\n    }\n\n    // now we are left with \"present\"s\n    const indexOfPresentChar = splitSolution.findIndex((x, index) => x === letter && !solutionCharsTaken[index]);\n    if (indexOfPresentChar > -1) {\n      statuses[i] = 'present';\n      solutionCharsTaken[indexOfPresentChar] = true;\n      return;\n    } else {\n      statuses[i] = 'absent';\n      return;\n    }\n  });\n  return statuses;\n};","map":{"version":3,"names":["unicodeSplit","getStatuses","solution","guesses","charObj","splitSolution","forEach","word","letter","i","includes","getGuessStatuses","guess","splitGuess","solutionCharsTaken","map","_","statuses","Array","from","length","indexOfPresentChar","findIndex","x","index"],"sources":["/Users/ruoxilyu/Downloads/CS5610/Wordle/src/lib/statuses.js"],"sourcesContent":["import { unicodeSplit } from './words'\n\n\nexport const getStatuses = (\n  solution,\n  guesses\n) => {\n  const charObj = {}\n  const splitSolution = unicodeSplit(solution)\n\n  guesses.forEach((word) => {\n    unicodeSplit(word).forEach((letter, i) => {\n      if (!splitSolution.includes(letter)) {\n        // make status absent\n        return (charObj[letter] = 'absent')\n      }\n\n      if (letter === splitSolution[i]) {\n        //make status correct\n        return (charObj[letter] = 'correct')\n      }\n\n      if (charObj[letter] !== 'correct') {\n        //make status present\n        return (charObj[letter] = 'present')\n      }\n    })\n  })\n\n  return charObj\n}\n\nexport const getGuessStatuses = (\n  solution,\n  guess\n) => {\n  const splitSolution = unicodeSplit(solution)\n  const splitGuess = unicodeSplit(guess)\n\n  const solutionCharsTaken = splitSolution.map((_) => false)\n\n  const statuses= Array.from(Array(guess.length))\n\n  // handle all correct cases first\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = 'correct'\n      solutionCharsTaken[i] = true\n      return\n    }\n  })\n\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return\n\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = 'absent'\n      return\n    }\n\n    // now we are left with \"present\"s\n    const indexOfPresentChar = splitSolution.findIndex(\n      (x, index) => x === letter && !solutionCharsTaken[index]\n    )\n\n    if (indexOfPresentChar > -1) {\n      statuses[i] = 'present'\n      solutionCharsTaken[indexOfPresentChar] = true\n      return\n    } else {\n      statuses[i] = 'absent'\n      return\n    }\n  })\n\n  return statuses\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,SAAS;AAGtC,OAAO,MAAMC,WAAW,GAAGA,CACzBC,QAAQ,EACRC,OAAO,KACJ;EACH,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClB,MAAMC,aAAa,GAAGL,YAAY,CAACE,QAAQ,CAAC;EAE5CC,OAAO,CAACG,OAAO,CAAEC,IAAI,IAAK;IACxBP,YAAY,CAACO,IAAI,CAAC,CAACD,OAAO,CAAC,CAACE,MAAM,EAAEC,CAAC,KAAK;MACxC,IAAI,CAACJ,aAAa,CAACK,QAAQ,CAACF,MAAM,CAAC,EAAE;QACnC;QACA,OAAQJ,OAAO,CAACI,MAAM,CAAC,GAAG,QAAQ;MACpC;MAEA,IAAIA,MAAM,KAAKH,aAAa,CAACI,CAAC,CAAC,EAAE;QAC/B;QACA,OAAQL,OAAO,CAACI,MAAM,CAAC,GAAG,SAAS;MACrC;MAEA,IAAIJ,OAAO,CAACI,MAAM,CAAC,KAAK,SAAS,EAAE;QACjC;QACA,OAAQJ,OAAO,CAACI,MAAM,CAAC,GAAG,SAAS;MACrC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOJ,OAAO;AAChB,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAGA,CAC9BT,QAAQ,EACRU,KAAK,KACF;EACH,MAAMP,aAAa,GAAGL,YAAY,CAACE,QAAQ,CAAC;EAC5C,MAAMW,UAAU,GAAGb,YAAY,CAACY,KAAK,CAAC;EAEtC,MAAME,kBAAkB,GAAGT,aAAa,CAACU,GAAG,CAAEC,CAAC,IAAK,KAAK,CAAC;EAE1D,MAAMC,QAAQ,GAAEC,KAAK,CAACC,IAAI,CAACD,KAAK,CAACN,KAAK,CAACQ,MAAM,CAAC,CAAC;;EAE/C;EACAP,UAAU,CAACP,OAAO,CAAC,CAACE,MAAM,EAAEC,CAAC,KAAK;IAChC,IAAID,MAAM,KAAKH,aAAa,CAACI,CAAC,CAAC,EAAE;MAC/BQ,QAAQ,CAACR,CAAC,CAAC,GAAG,SAAS;MACvBK,kBAAkB,CAACL,CAAC,CAAC,GAAG,IAAI;MAC5B;IACF;EACF,CAAC,CAAC;EAEFI,UAAU,CAACP,OAAO,CAAC,CAACE,MAAM,EAAEC,CAAC,KAAK;IAChC,IAAIQ,QAAQ,CAACR,CAAC,CAAC,EAAE;IAEjB,IAAI,CAACJ,aAAa,CAACK,QAAQ,CAACF,MAAM,CAAC,EAAE;MACnC;MACAS,QAAQ,CAACR,CAAC,CAAC,GAAG,QAAQ;MACtB;IACF;;IAEA;IACA,MAAMY,kBAAkB,GAAGhB,aAAa,CAACiB,SAAS,CAChD,CAACC,CAAC,EAAEC,KAAK,KAAKD,CAAC,KAAKf,MAAM,IAAI,CAACM,kBAAkB,CAACU,KAAK,CAAC,CACzD;IAED,IAAIH,kBAAkB,GAAG,CAAC,CAAC,EAAE;MAC3BJ,QAAQ,CAACR,CAAC,CAAC,GAAG,SAAS;MACvBK,kBAAkB,CAACO,kBAAkB,CAAC,GAAG,IAAI;MAC7C;IACF,CAAC,MAAM;MACLJ,QAAQ,CAACR,CAAC,CAAC,GAAG,QAAQ;MACtB;IACF;EACF,CAAC,CAAC;EAEF,OAAOQ,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}