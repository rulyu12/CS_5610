{"ast":null,"code":"import{unicodeSplit}from'./words';export var getStatuses=function getStatuses(solution,guesses){var charObj={};var splitSolution=unicodeSplit(solution);guesses.forEach(function(word){unicodeSplit(word).forEach(function(letter,i){if(!splitSolution.includes(letter)){// make status absent\nreturn charObj[letter]='absent';}if(letter===splitSolution[i]){//make status correct\nreturn charObj[letter]='correct';}if(charObj[letter]!=='correct'){//make status present\nreturn charObj[letter]='present';}});});return charObj;};export var getGuessStatuses=function getGuessStatuses(solution,guess){var splitSolution=unicodeSplit(solution);var splitGuess=unicodeSplit(guess);var solutionCharsTaken=splitSolution.map(function(_){return false;});var statuses=Array.from(Array(guess.length));// handle all correct cases first\nsplitGuess.forEach(function(letter,i){if(letter===splitSolution[i]){statuses[i]='correct';solutionCharsTaken[i]=true;return;}});splitGuess.forEach(function(letter,i){if(statuses[i])return;if(!splitSolution.includes(letter)){// handles the absent case\nstatuses[i]='absent';return;}// now we are left with \"present\"s\nvar indexOfPresentChar=splitSolution.findIndex(function(x,index){return x===letter&&!solutionCharsTaken[index];});if(indexOfPresentChar>-1){statuses[i]='present';solutionCharsTaken[indexOfPresentChar]=true;return;}else{statuses[i]='absent';return;}});return statuses;};","map":{"version":3,"names":["unicodeSplit","getStatuses","solution","guesses","charObj","splitSolution","forEach","word","letter","i","includes","getGuessStatuses","guess","splitGuess","solutionCharsTaken","map","_","statuses","Array","from","length","indexOfPresentChar","findIndex","x","index"],"sources":["/Users/ruoxilyu/Downloads/CS5610/Wordle/src/lib/statuses.js"],"sourcesContent":["import { unicodeSplit } from './words'\n\n\nexport const getStatuses = (\n  solution,\n  guesses\n) => {\n  const charObj = {}\n  const splitSolution = unicodeSplit(solution)\n\n  guesses.forEach((word) => {\n    unicodeSplit(word).forEach((letter, i) => {\n      if (!splitSolution.includes(letter)) {\n        // make status absent\n        return (charObj[letter] = 'absent')\n      }\n\n      if (letter === splitSolution[i]) {\n        //make status correct\n        return (charObj[letter] = 'correct')\n      }\n\n      if (charObj[letter] !== 'correct') {\n        //make status present\n        return (charObj[letter] = 'present')\n      }\n    })\n  })\n\n  return charObj\n}\n\nexport const getGuessStatuses = (\n  solution,\n  guess\n) => {\n  const splitSolution = unicodeSplit(solution)\n  const splitGuess = unicodeSplit(guess)\n\n  const solutionCharsTaken = splitSolution.map((_) => false)\n\n  const statuses= Array.from(Array(guess.length))\n\n  // handle all correct cases first\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = 'correct'\n      solutionCharsTaken[i] = true\n      return\n    }\n  })\n\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return\n\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = 'absent'\n      return\n    }\n\n    // now we are left with \"present\"s\n    const indexOfPresentChar = splitSolution.findIndex(\n      (x, index) => x === letter && !solutionCharsTaken[index]\n    )\n\n    if (indexOfPresentChar > -1) {\n      statuses[i] = 'present'\n      solutionCharsTaken[indexOfPresentChar] = true\n      return\n    } else {\n      statuses[i] = 'absent'\n      return\n    }\n  })\n\n  return statuses\n}\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,SAAS,CAGtC,MAAO,IAAM,CAAAC,WAAW,CAAG,QAAd,CAAAA,WAAWA,CACtBC,QAAQ,CACRC,OAAO,CACJ,CACH,GAAM,CAAAC,OAAO,CAAG,CAAC,CAAC,CAClB,GAAM,CAAAC,aAAa,CAAGL,YAAY,CAACE,QAAQ,CAAC,CAE5CC,OAAO,CAACG,OAAO,CAAC,SAACC,IAAI,CAAK,CACxBP,YAAY,CAACO,IAAI,CAAC,CAACD,OAAO,CAAC,SAACE,MAAM,CAAEC,CAAC,CAAK,CACxC,GAAI,CAACJ,aAAa,CAACK,QAAQ,CAACF,MAAM,CAAC,CAAE,CACnC;AACA,MAAQ,CAAAJ,OAAO,CAACI,MAAM,CAAC,CAAG,QAAQ,CACpC,CAEA,GAAIA,MAAM,GAAKH,aAAa,CAACI,CAAC,CAAC,CAAE,CAC/B;AACA,MAAQ,CAAAL,OAAO,CAACI,MAAM,CAAC,CAAG,SAAS,CACrC,CAEA,GAAIJ,OAAO,CAACI,MAAM,CAAC,GAAK,SAAS,CAAE,CACjC;AACA,MAAQ,CAAAJ,OAAO,CAACI,MAAM,CAAC,CAAG,SAAS,CACrC,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CAEF,MAAO,CAAAJ,OAAO,CAChB,CAAC,CAED,MAAO,IAAM,CAAAO,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAC3BT,QAAQ,CACRU,KAAK,CACF,CACH,GAAM,CAAAP,aAAa,CAAGL,YAAY,CAACE,QAAQ,CAAC,CAC5C,GAAM,CAAAW,UAAU,CAAGb,YAAY,CAACY,KAAK,CAAC,CAEtC,GAAM,CAAAE,kBAAkB,CAAGT,aAAa,CAACU,GAAG,CAAC,SAACC,CAAC,QAAK,MAAK,GAAC,CAE1D,GAAM,CAAAC,QAAQ,CAAEC,KAAK,CAACC,IAAI,CAACD,KAAK,CAACN,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE/C;AACAP,UAAU,CAACP,OAAO,CAAC,SAACE,MAAM,CAAEC,CAAC,CAAK,CAChC,GAAID,MAAM,GAAKH,aAAa,CAACI,CAAC,CAAC,CAAE,CAC/BQ,QAAQ,CAACR,CAAC,CAAC,CAAG,SAAS,CACvBK,kBAAkB,CAACL,CAAC,CAAC,CAAG,IAAI,CAC5B,OACF,CACF,CAAC,CAAC,CAEFI,UAAU,CAACP,OAAO,CAAC,SAACE,MAAM,CAAEC,CAAC,CAAK,CAChC,GAAIQ,QAAQ,CAACR,CAAC,CAAC,CAAE,OAEjB,GAAI,CAACJ,aAAa,CAACK,QAAQ,CAACF,MAAM,CAAC,CAAE,CACnC;AACAS,QAAQ,CAACR,CAAC,CAAC,CAAG,QAAQ,CACtB,OACF,CAEA;AACA,GAAM,CAAAY,kBAAkB,CAAGhB,aAAa,CAACiB,SAAS,CAChD,SAACC,CAAC,CAAEC,KAAK,QAAK,CAAAD,CAAC,GAAKf,MAAM,EAAI,CAACM,kBAAkB,CAACU,KAAK,CAAC,GACzD,CAED,GAAIH,kBAAkB,CAAG,CAAC,CAAC,CAAE,CAC3BJ,QAAQ,CAACR,CAAC,CAAC,CAAG,SAAS,CACvBK,kBAAkB,CAACO,kBAAkB,CAAC,CAAG,IAAI,CAC7C,OACF,CAAC,IAAM,CACLJ,QAAQ,CAACR,CAAC,CAAC,CAAG,QAAQ,CACtB,OACF,CACF,CAAC,CAAC,CAEF,MAAO,CAAAQ,QAAQ,CACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}