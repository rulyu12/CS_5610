{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/ruoxilyu/Downloads/CS5610/Wordle/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{VALID_GUESSES as HARDVALID_GUESSES}from'../constants/hardValidGuess';import{WORDS as HARDWORDS}from'../constants/hardwordlist';import{VALID_GUESSES}from'../constants/validGuesses';import{WORDS}from'../constants/wordlist';import{default as GraphemeSplitter}from'grapheme-splitter';export var firstGameDate=new Date(2022,0);export var periodInDays=1;export var isWordInWordList=function isWordInWordList(word,isHard){if(isHard){return HARDWORDS.includes(localeAwareLowerCase(word))||HARDVALID_GUESSES.includes(localeAwareLowerCase(word));}return WORDS.includes(localeAwareLowerCase(word))||VALID_GUESSES.includes(localeAwareLowerCase(word));};export var isWinningWord=function isWinningWord(word){var _getSolution=getSolution(),solution=_getSolution.solution;return solution===word;};export var findFirstUnusedReveal=function findFirstUnusedReveal(word,guesses){if(guesses.length===0){return false;}var lettersLeftArray=[];var splitWord=unicodeSplit(word);var n;var _iterator=_createForOfIteratorHelper(splitWord),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var letter=_step.value;n=lettersLeftArray.indexOf(letter);if(n!==-1){lettersLeftArray.splice(n,1);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return false;};export var unicodeSplit=function unicodeSplit(word){return new GraphemeSplitter().splitGraphemes(word);};export var unicodeLength=function unicodeLength(word){return unicodeSplit(word).length;};export var localeAwareLowerCase=function localeAwareLowerCase(text){return process.env.REACT_APP_LOCALE_STRING?text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING):text.toLowerCase();};export var localeAwareUpperCase=function localeAwareUpperCase(text){return process.env.REACT_APP_LOCALE_STRING?text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING):text.toUpperCase();};var wordTree={};export var getWordOfDay=function getWordOfDay(){var isHard=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var list=isHard?HARDWORDS:WORDS;var code;if(isHard){if(wordTree[1]){code=wordTree[1];}else{code=list[Math.floor(Math.random()*list.length)];wordTree[1]=code;}}else{if(wordTree[2]){code=wordTree[2];}else{code=list[Math.floor(Math.random()*list.length)];wordTree[2]=code;}}return localeAwareUpperCase(code);};export var getSolution=function getSolution(){var wordOfTheDay=getWordOfDay(localStorage.getItem('gameMode')==='hard');return{solution:wordOfTheDay};};export var fn=function fn(){var _getSolution2=getSolution(),solution=_getSolution2.solution;return{solution:solution};};","map":{"version":3,"names":["VALID_GUESSES","HARDVALID_GUESSES","WORDS","HARDWORDS","default","GraphemeSplitter","firstGameDate","Date","periodInDays","isWordInWordList","word","isHard","includes","localeAwareLowerCase","isWinningWord","_getSolution","getSolution","solution","findFirstUnusedReveal","guesses","length","lettersLeftArray","splitWord","unicodeSplit","n","_iterator","_createForOfIteratorHelper","_step","s","done","letter","value","indexOf","splice","err","e","f","splitGraphemes","unicodeLength","text","process","env","REACT_APP_LOCALE_STRING","toLocaleLowerCase","toLowerCase","localeAwareUpperCase","toLocaleUpperCase","toUpperCase","wordTree","getWordOfDay","arguments","undefined","list","code","Math","floor","random","wordOfTheDay","localStorage","getItem","fn","_getSolution2"],"sources":["/Users/ruoxilyu/Downloads/CS5610/Wordle/src/lib/words.js"],"sourcesContent":["import { VALID_GUESSES as HARDVALID_GUESSES } from '../constants/hardValidGuess';\nimport { WORDS as HARDWORDS } from '../constants/hardwordlist';\nimport { VALID_GUESSES } from '../constants/validGuesses';\nimport { WORDS } from '../constants/wordlist';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\n\nexport const firstGameDate = new Date(2022, 0);\nexport const periodInDays = 1;\n\nexport const isWordInWordList = (word, isHard) => {\n  if (isHard) {\n    return (\n      HARDWORDS.includes(localeAwareLowerCase(word)) ||\n      HARDVALID_GUESSES.includes(localeAwareLowerCase(word))\n    );\n  }\n  return (\n    WORDS.includes(localeAwareLowerCase(word)) ||\n    VALID_GUESSES.includes(localeAwareLowerCase(word))\n  );\n};\n\nexport const isWinningWord = (word) => {\n  const { solution } = getSolution();\n  return solution === word;\n};\n\nexport const findFirstUnusedReveal = (word, guesses) => {\n  if (guesses.length === 0) {\n    return false;\n  }\n  const lettersLeftArray = [];\n  const splitWord = unicodeSplit(word);\n  let n;\n  for (const letter of splitWord) {\n    n = lettersLeftArray.indexOf(letter);\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1);\n    }\n  }\n\n  return false;\n};\n\nexport const unicodeSplit = (word) => {\n  return new GraphemeSplitter().splitGraphemes(word);\n};\n\nexport const unicodeLength = (word) => {\n  return unicodeSplit(word).length;\n};\n\nexport const localeAwareLowerCase = (text) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toLowerCase();\n};\n\nexport const localeAwareUpperCase = (text) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toUpperCase();\n};\n\nconst wordTree = {};\nexport const getWordOfDay = (isHard = false) => {\n  const list = isHard ? HARDWORDS : WORDS;\n  let code;\n  if (isHard) {\n    if (wordTree[1]) {\n      code = wordTree[1];\n    } else {\n      code = list[Math.floor(Math.random() * list.length)];\n      wordTree[1] = code;\n    }\n  } else {\n    if (wordTree[2]) {\n      code = wordTree[2];\n    } else {\n      code = list[Math.floor(Math.random() * list.length)];\n      wordTree[2] = code;\n    }\n  }\n  return localeAwareUpperCase(code);\n};\n\nexport const getSolution = () => {\n  const wordOfTheDay = getWordOfDay(\n    localStorage.getItem('gameMode') === 'hard'\n  );\n  return {\n    solution: wordOfTheDay,\n  };\n};\n\nexport const fn = () => {\n  const { solution } = getSolution();\n  return { solution };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}