{"ast":null,"code":"import { VALID_GUESSES as HARDVALID_GUESSES } from '../constants/hardValidGuess';\nimport { WORDS as HARDWORDS } from '../constants/hardwordlist';\nimport { VALID_GUESSES } from '../constants/validGuesses';\nimport { WORDS } from '../constants/wordlist';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\nexport const firstGameDate = new Date(2022, 0);\nexport const periodInDays = 1;\nexport const isWordInWordList = (word, isHard) => {\n  if (isHard) {\n    return HARDWORDS.includes(localeAwareLowerCase(word)) || HARDVALID_GUESSES.includes(localeAwareLowerCase(word));\n  }\n  return WORDS.includes(localeAwareLowerCase(word)) || VALID_GUESSES.includes(localeAwareLowerCase(word));\n};\nexport const isWinningWord = word => {\n  const {\n    solution\n  } = getSolution();\n  return solution === word;\n};\nexport const findFirstUnusedReveal = (word, guesses) => {\n  if (guesses.length === 0) {\n    return false;\n  }\n  const lettersLeftArray = [];\n  const splitWord = unicodeSplit(word);\n  let n;\n  for (const letter of splitWord) {\n    n = lettersLeftArray.indexOf(letter);\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1);\n    }\n  }\n  return false;\n};\nexport const unicodeSplit = word => {\n  return new GraphemeSplitter().splitGraphemes(word);\n};\nexport const unicodeLength = word => {\n  return unicodeSplit(word).length;\n};\nexport const localeAwareLowerCase = text => {\n  return process.env.REACT_APP_LOCALE_STRING ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING) : text.toLowerCase();\n};\nexport const localeAwareUpperCase = text => {\n  return process.env.REACT_APP_LOCALE_STRING ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING) : text.toUpperCase();\n};\nconst wordTree = {};\nexport const getWordOfDay = function () {\n  let isHard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const list = isHard ? HARDWORDS : WORDS;\n  let code;\n  if (isHard) {\n    if (wordTree[1]) {\n      code = wordTree[1];\n    } else {\n      code = list[Math.floor(Math.random() * list.length)];\n      wordTree[1] = code;\n    }\n  } else {\n    if (wordTree[2]) {\n      code = wordTree[2];\n    } else {\n      code = list[Math.floor(Math.random() * list.length)];\n      wordTree[2] = code;\n    }\n  }\n  return localeAwareUpperCase(code);\n};\nexport const getSolution = () => {\n  const wordOfTheDay = getWordOfDay(localStorage.getItem('gameMode') === 'hard');\n  return {\n    solution: wordOfTheDay\n  };\n};\nexport const fn = () => {\n  const {\n    solution\n  } = getSolution();\n  return {\n    solution\n  };\n};","map":{"version":3,"names":["VALID_GUESSES","HARDVALID_GUESSES","WORDS","HARDWORDS","default","GraphemeSplitter","firstGameDate","Date","periodInDays","isWordInWordList","word","isHard","includes","localeAwareLowerCase","isWinningWord","solution","getSolution","findFirstUnusedReveal","guesses","length","lettersLeftArray","splitWord","unicodeSplit","n","letter","indexOf","splice","splitGraphemes","unicodeLength","text","process","env","REACT_APP_LOCALE_STRING","toLocaleLowerCase","toLowerCase","localeAwareUpperCase","toLocaleUpperCase","toUpperCase","wordTree","getWordOfDay","arguments","undefined","list","code","Math","floor","random","wordOfTheDay","localStorage","getItem","fn"],"sources":["/Users/ruoxilyu/Downloads/CS5610/Wordle/src/lib/words.js"],"sourcesContent":["import { VALID_GUESSES as HARDVALID_GUESSES } from '../constants/hardValidGuess';\nimport { WORDS as HARDWORDS } from '../constants/hardwordlist';\nimport { VALID_GUESSES } from '../constants/validGuesses';\nimport { WORDS } from '../constants/wordlist';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\n\nexport const firstGameDate = new Date(2022, 0);\nexport const periodInDays = 1;\n\nexport const isWordInWordList = (word, isHard) => {\n  if (isHard) {\n    return (\n      HARDWORDS.includes(localeAwareLowerCase(word)) ||\n      HARDVALID_GUESSES.includes(localeAwareLowerCase(word))\n    );\n  }\n  return (\n    WORDS.includes(localeAwareLowerCase(word)) ||\n    VALID_GUESSES.includes(localeAwareLowerCase(word))\n  );\n};\n\nexport const isWinningWord = (word) => {\n  const { solution } = getSolution();\n  return solution === word;\n};\n\nexport const findFirstUnusedReveal = (word, guesses) => {\n  if (guesses.length === 0) {\n    return false;\n  }\n  const lettersLeftArray = [];\n  const splitWord = unicodeSplit(word);\n  let n;\n  for (const letter of splitWord) {\n    n = lettersLeftArray.indexOf(letter);\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1);\n    }\n  }\n\n  return false;\n};\n\nexport const unicodeSplit = (word) => {\n  return new GraphemeSplitter().splitGraphemes(word);\n};\n\nexport const unicodeLength = (word) => {\n  return unicodeSplit(word).length;\n};\n\nexport const localeAwareLowerCase = (text) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toLowerCase();\n};\n\nexport const localeAwareUpperCase = (text) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toUpperCase();\n};\n\nconst wordTree = {};\nexport const getWordOfDay = (isHard = false) => {\n  const list = isHard ? HARDWORDS : WORDS;\n  let code;\n  if (isHard) {\n    if (wordTree[1]) {\n      code = wordTree[1];\n    } else {\n      code = list[Math.floor(Math.random() * list.length)];\n      wordTree[1] = code;\n    }\n  } else {\n    if (wordTree[2]) {\n      code = wordTree[2];\n    } else {\n      code = list[Math.floor(Math.random() * list.length)];\n      wordTree[2] = code;\n    }\n  }\n  return localeAwareUpperCase(code);\n};\n\nexport const getSolution = () => {\n  const wordOfTheDay = getWordOfDay(\n    localStorage.getItem('gameMode') === 'hard'\n  );\n  return {\n    solution: wordOfTheDay,\n  };\n};\n\nexport const fn = () => {\n  const { solution } = getSolution();\n  return { solution };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}